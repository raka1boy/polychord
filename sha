
//Define shapes input and output. 
// 
// On shape instantiation we do some logic, that's hidden somewhere inside 
// For example, on instantiation of math::Sqrt shape, it takes in a value, and outputs it.
// using "set" keyword we say that we want to put the result of whatever we want inside SquareValue
// Types are optional.
//So now, on every passed InitialValue our shape SquareRoot will put a value inside our SquareValue
shape SquareRoot:
    [ InitialValue: f64 SquareValue: f64 ]
    ( set SquareValue to std::math::Sqrt InitialValue )

//Notice that even though we pass in a io::Stdin value it still allows us to do so.
//Because this is not instantiating. Here std::io::Stdin["FloatInput"] is an expression, a call to
//std::io::Stdin["FloatInput"] respectively. But it remembers the pipeline of actions.
//Notice that Main is also a shape, and behaves as such. Thus, we are caling it recursively.
//It accepts nothing.
//What is this bracket syntax?
//Shapes can hold a huge amount of implementations and arguments inside. We can actually access stuff by index.
//Like std::io::Stdin[11]
//This will give us the same thing.
shape Main:
    //Here we execute everything linearly. We set SquareRoot shape to something. What something?
    //Well, We bind FloatInput and then OutWithNewlile. Then every "argument" does its own thing sequentially.
    //That's why order of "Arguments" matter.
    //I am using quotes because these are not actually args. You essentially glue shapes together, 
    //and the resulting shape does something that is inside its implementation.
    //Shape can also do nothing, and just bind two shapes together, like anonymous shape
    //In that case, shape will "return" its last arguments. 
    //example:
    //
    //set SomeShapeWithOneArg to [[]]
    //
    //
    //


    (set SquareRoot to [std::io::Stdin["FloatInput"] std::io::Stdout["OutWithNewline"]])
    //We then call main again, with no shape input. 
    (Main)
    
//Another thing is, that Shapes might resemble Structs on high level. But they vary deeply.
//Shapes don't actually "exist" at runtime. They are used to generate execution trees, in which the data flows.
//Shapes are only there to allow user to see the stuff that happends.
//On the low level, it's basically block programming. 